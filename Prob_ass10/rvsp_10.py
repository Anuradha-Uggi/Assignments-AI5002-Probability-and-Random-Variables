# -*- coding: utf-8 -*-
"""rvsp_10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ny7vspuSjl7Y45jwiL2S2p83TgRY27tm
"""

import numpy as np
import matplotlib.pyplot as plt

##probability of occurence of Head
p=0.5;

#### probability that number of coin tosses required for occurence of first head
P_odd=[];
P_even=[];
x_odd=[];
x_even=[];

for i in range(1,100):
     ### Computing Probability that first head occurs in odd tosses
     if (i%2)!=0:
         P_odd=np.append(P_odd,(p**i));
         x_odd=np.append(x_odd,i);
    ### Computing Probability that first head occurs in even tosses
     else:
        P_even=np.append(P_even,(p**i));
        x_even=np.append(x_even,i)

###corresponding plots

plt.figure(1)
plt.subplot(1,2,1)
plt.stem(x_odd,P_odd,'r')
plt.title('odd tosses')
plt.xlabel('Number of Odd tosses(X)')
plt.ylabel('P(X)')

plt.subplot(1,2,2)
plt.stem(x_even,P_even,'g')
plt.title('even tosses')
plt.xlabel('Number of even tosses(Y)')
plt.ylabel('P(Y)')

### pmf computation where y is r.v says as if y=0:even tosses require to get first head and y=1:odd tosses required to get first head 
P_h_even=(0.5**2)/(1-0.5**2);
P_h_odd=(0.5)/(1-0.5**2)
P_even_odd=np.append(P_h_even,P_h_odd)
y=[0,1]
c=0;

### cdf computation
cdf=[];
for i in range(2):
     c=c+P_even_odd[i]
     cdf=np.append(cdf,c)


plt.figure(2)
plt.stem(y,P_even_odd,'y')
plt.xlabel('z(z=0-even,z=1-odd)')
plt.ylabel('pmf')

plt.figure(3)
plt.stem(y,cdf,'g')
plt.xlabel('z')
plt.ylabel('cdf')

import numpy as np